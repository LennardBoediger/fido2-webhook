
stages:
  - pull-github
  - build
  - cleanup
  - deploy

variables:
  GIT_STRATEGY: clone			#This seems to have no effect also set in webinterface
  GIT_DEPTH: 0					#This seems to have no effect also set in webinterface
  GIT_SUBMODULE_STRATEGY: recursive

pull:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
  image: ubuntu:20.04
  tags:
    - uind
  stage: pull-github
  before_script:
    - apt-get update -y
    - apt-get install -y git
  script:
    - mkdir git-magic
    - cd git-magic
    - git clone --mirror --recurse-submodules https://github.com/LennardBoediger/fido2-webhook.git
    - cd fido2-webhook.git/
    - git remote add --mirror=fetch secondary https://git.dotplex.com/lennard.boediger/ci-test-fido2.git
    - git remote set-url secondary https://oauth2:$GITLAB_REPO_KEY@git.dotplex.com/lennard.boediger/ci-test-fido2.git
    - git fetch origin
    - git push secondary --tags
    - git push secondary --all

build:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'  #run this job only on push event
  tags:
    - dinvm
  stage: build
  script:
    - sleep 3h
    - make ci
  artifacts:
    paths:
      - builds/*

delete-vm:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'  #run this job only on push event
  tags:
    - shell
  stage: cleanup
  script:
    - vboxmanage unregistervm ubuntu-runner-runner-hszxezQU-concurrent-0 --delete



build-simulation:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'  #run this job only on push event
  image: ubuntu:20.04
  tags:
    - uind
  stage: build
  before_script:
    - apt update -y
    - apt install -y git
    - apt install -y make
    - apt install -y gcc
    - apt install -y python3
    - git submodule update --init --recursive
  script:
    - make all

deploy-release:
  when: manual   #run this job only on manual user interaction in the webinterface
  only:
    - tags        #show this job only when tags are pushed
  image: ubuntu:20.04
  tags:
    - uind
  stage: deploy
  script:
    - apt-get update -y
    - apt-get install -y git
    - apt-get install -y curl
    - apt-get install -y jq
    - apt-get install -y zip
    - chmod +x ./release.sh
    - ./release.sh
    #- sleep 13h
  environment:
    name: production







#test-simulation:
#  tags:
#    - ci
#  stage: test
#  script:
#    - sudo ./main
